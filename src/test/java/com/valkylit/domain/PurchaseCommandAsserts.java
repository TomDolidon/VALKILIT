package com.valkylit.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PurchaseCommandAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPurchaseCommandAllPropertiesEquals(PurchaseCommand expected, PurchaseCommand actual) {
        assertPurchaseCommandAutoGeneratedPropertiesEquals(expected, actual);
        assertPurchaseCommandAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPurchaseCommandAllUpdatablePropertiesEquals(PurchaseCommand expected, PurchaseCommand actual) {
        assertPurchaseCommandUpdatableFieldsEquals(expected, actual);
        assertPurchaseCommandUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPurchaseCommandAutoGeneratedPropertiesEquals(PurchaseCommand expected, PurchaseCommand actual) {
        assertThat(expected)
            .as("Verify PurchaseCommand auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPurchaseCommandUpdatableFieldsEquals(PurchaseCommand expected, PurchaseCommand actual) {
        assertThat(expected)
            .as("Verify PurchaseCommand relevant properties")
            .satisfies(e -> assertThat(e.getExpeditionDate()).as("check expeditionDate").isEqualTo(actual.getExpeditionDate()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPurchaseCommandUpdatableRelationshipsEquals(PurchaseCommand expected, PurchaseCommand actual) {
        assertThat(expected)
            .as("Verify PurchaseCommand relationships")
            .satisfies(e -> assertThat(e.getDeliveryAddress()).as("check deliveryAddress").isEqualTo(actual.getDeliveryAddress()))
            .satisfies(e -> assertThat(e.getClient()).as("check client").isEqualTo(actual.getClient()));
    }
}
