package com.valkylit.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PurchaseCommandLineAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPurchaseCommandLineAllPropertiesEquals(PurchaseCommandLine expected, PurchaseCommandLine actual) {
        assertPurchaseCommandLineAutoGeneratedPropertiesEquals(expected, actual);
        assertPurchaseCommandLineAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPurchaseCommandLineAllUpdatablePropertiesEquals(PurchaseCommandLine expected, PurchaseCommandLine actual) {
        assertPurchaseCommandLineUpdatableFieldsEquals(expected, actual);
        assertPurchaseCommandLineUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPurchaseCommandLineAutoGeneratedPropertiesEquals(PurchaseCommandLine expected, PurchaseCommandLine actual) {
        assertThat(expected)
            .as("Verify PurchaseCommandLine auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPurchaseCommandLineUpdatableFieldsEquals(PurchaseCommandLine expected, PurchaseCommandLine actual) {
        assertThat(expected)
            .as("Verify PurchaseCommandLine relevant properties")
            .satisfies(e -> assertThat(e.getQuantity()).as("check quantity").isEqualTo(actual.getQuantity()))
            .satisfies(e -> assertThat(e.getUnitPrice()).as("check unitPrice").isEqualTo(actual.getUnitPrice()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPurchaseCommandLineUpdatableRelationshipsEquals(PurchaseCommandLine expected, PurchaseCommandLine actual) {
        assertThat(expected)
            .as("Verify PurchaseCommandLine relationships")
            .satisfies(e -> assertThat(e.getBook()).as("check book").isEqualTo(actual.getBook()))
            .satisfies(e -> assertThat(e.getPurchaseCommand()).as("check purchaseCommand").isEqualTo(actual.getPurchaseCommand()));
    }
}
